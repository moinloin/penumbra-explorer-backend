name: Rust CI/CD Pipeline (Production)

on:
  release:
    types: [published]
  workflow_dispatch:

env:
  APP_NAME: penumbra-explorer
  SERVER_USER: deploy-penumbra-explorer
  SERVER_HOST: ${{ secrets.SERVER_HOST }}

jobs:
  code-quality:
    if: ${{ github.event.release.target_commitish == 'main' }}
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout at release tag
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.release.tag_name }}

      - name: Install Rust toolchain & components
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.83.0
          override: true
          components: rustfmt, clippy

      - name: Cache dependencies & build artifact
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy (pedantic + deny warnings)
        run: cargo clippy --all-targets --all-features --workspace -- -W clippy::pedantic -D warnings

  test:
    if: ${{ github.event.release.target_commitish == 'main' }}
    name: Run Tests
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - name: Checkout at release tag
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.release.tag_name }}

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.83.0
          override: true

      - name: Cache dependencies & build artifact
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Run tests
        run: cargo test --all

  deploy:
    if: ${{ github.event.release.target_commitish == 'main' }}
    name: Deploy to Hetzner (Production)
    runs-on: ubuntu-latest
    needs: [code-quality, test]
    steps:
      - name: Checkout at release tag
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.release.tag_name }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image (tarball)
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: ${{ env.APP_NAME }}:latest
          outputs: type=docker,dest=/tmp/${{ env.APP_NAME }}.tar

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          known_hosts: unnecessary

      - name: Add server to known_hosts
        run: ssh-keyscan -H ${{ env.SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: Transfer Docker image
        run: scp /tmp/${{ env.APP_NAME }}.tar ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }}:~/deployments/

      - name: Deploy with Blue-Green mechanism
        run: ssh ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} 'sudo /opt/deployment/deploy.sh'

      - name: Check deployment status
        run: ssh ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} 'tail -n 20 /opt/deployment/deploy.log'
